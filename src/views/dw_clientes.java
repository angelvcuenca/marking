/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import com.google.gson.Gson;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import librarys.*;
import models.conexion_bd;

/**
 *
 * @author Angel CM <angelvcuenca@gmail.com>
 */
public class dw_clientes extends javax.swing.JInternalFrame {

    /**
     * Creates new form BajarData
     */
    conexion_bd con = new conexion_bd();
    int var_count;

    public dw_clientes() {
        initComponents();
        txt_area_detalles_cliente.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        descargar_data_cliente = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        subir_data_cliente = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_area_detalles_cliente = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        lb_total_cliente = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setTitle("DESCARGAR DATOS DE LA WEB");
        setToolTipText("");

        jPanel1.setBackground(new java.awt.Color(51, 0, 51));

        descargar_data_cliente.setBackground(new java.awt.Color(51, 102, 0));
        descargar_data_cliente.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        descargar_data_cliente.setForeground(new java.awt.Color(255, 255, 255));
        descargar_data_cliente.setText("Descargar Datos Web");
        descargar_data_cliente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        descargar_data_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descargar_data_clienteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("*- CLIENTES -*");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/download-to-storage-drive.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 153));
        jLabel3.setText("MODULO DE TRANSMISION DE DATOS");

        subir_data_cliente.setBackground(new java.awt.Color(0, 51, 102));
        subir_data_cliente.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        subir_data_cliente.setForeground(new java.awt.Color(255, 255, 255));
        subir_data_cliente.setText("Subir Datos a la Web");
        subir_data_cliente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subir_data_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subir_data_clienteActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DETALLES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 12), new java.awt.Color(0, 153, 204))); // NOI18N

        txt_area_detalles_cliente.setColumns(20);
        txt_area_detalles_cliente.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
        txt_area_detalles_cliente.setRows(5);
        jScrollPane1.setViewportView(txt_area_detalles_cliente);

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel4.setText("TOTAL DE CLIENTE DESCARGADOS :  ");

        lb_total_cliente.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lb_total_cliente.setForeground(new java.awt.Color(0, 153, 204));
        lb_total_cliente.setText("00");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(lb_total_cliente)
                        .addGap(0, 156, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lb_total_cliente))
                .addContainerGap())
        );

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/upload.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(306, 306, 306))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(descargar_data_cliente))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(subir_data_cliente))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel6)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(49, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(descargar_data_cliente)
                                .addGap(74, 74, 74))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(subir_data_cliente)
                                .addGap(80, 80, 80))))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void descargar_data_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descargar_data_clienteActionPerformed

        data_tipo_cliente();

    }//GEN-LAST:event_descargar_data_clienteActionPerformed

    private void subir_data_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subir_data_clienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subir_data_clienteActionPerformed

    public void data_tipo_cliente() {
        String cadena = null;
        String cargosEmpleado = null;
        String departamentos = null;
        String empleados = null;
        String cliente = null;
        try {
            web_services_class wservice = new web_services_class();
            cadena = wservice.descargar_tipo_cliente(); //Tabla tipo cliente
            cargosEmpleado = wservice.descargar_cargosempleado(); // Tabla cliente
            departamentos = wservice.descargar_departamentos(); // Tabla cliente
            empleados = wservice.descargar_empleado(); // Tabla cliente
            cliente = wservice.descargar_cliente(); // Tabla cliente

        } catch (IOException ex) {
            Logger.getLogger(dw_clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
        Gson gson = new Gson();
        try {
            Connection c = con.conexion();
            /*
             * TIPOS CLIENTE 
             */

            List<Map<String, Object>> parsedList = gson.fromJson(cadena, List.class);
            PreparedStatement verStmt = c.prepareStatement("SELECT * \n"
                    + "FROM billing_clientetipo \n"
                    + "WHERE idclientetipo=?");
            PreparedStatement guardarStmt = c.prepareStatement("INSERT INTO billing_clientetipo(idclientetipo,tipo,descripcion,deleted,descuento,default_price,default_product,fact_lotes) \n"
                    + "VALUES(?,?,?,?,?,?,?,?)");
            parsedList.stream().forEach((Map<String, Object> parsedItem) -> {
                //int var_count = 0;
                try {

                    verStmt.setString(1, (String) parsedItem.get("idclientetipo"));

                    ResultSet rs_v = verStmt.executeQuery();

                    if (!rs_v.last()) {
                        //JOptionPane.showMessageDialog(null, "TIPO CLIENTE EXISTE", "VERIFIQUE POR FAVOR", JOptionPane.ERROR_MESSAGE);
                        //txt_area_detalles_cliente.setText("Dato Duplicado: -> "+(String) parsedItem.get("tipo"));
//                        txt_area_detalles_cliente.append("Dato Duplicado: -> "+(String) parsedItem.get("tipo") + "\n");
//                    } else {
//                        var_count++;
                        guardarStmt.setString(1, (String) parsedItem.get("idclientetipo"));
                        guardarStmt.setString(2, (String) parsedItem.get("tipo"));
                        guardarStmt.setString(3, (String) parsedItem.get("descripcion"));
                        guardarStmt.setString(4, (String) parsedItem.get("deleted"));
                        guardarStmt.setString(5, (String) parsedItem.get("descuento"));
                        guardarStmt.setString(6, (String) parsedItem.get("default_price"));
                        guardarStmt.setString(7, (String) parsedItem.get("default_product"));
                        guardarStmt.setString(8, (String) parsedItem.get("fact_lotes"));
                        guardarStmt.execute();
//                        JOptionPane.showMessageDialog(null, "Comensal Registrado Correctamente");
//                        txt_area_detalles_cliente.append("Dato Transmito: -> "+(String) parsedItem.get("tipo") + "\n");
//                        String total = String.valueOf(var_count);
//                        lb_total_cliente.setText(total);
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(dw_clientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            });

            /*CARGOS CARGOS_EMPLEADOS*/
            List<Map<String, Object>> parsedListcargoEmpl = gson.fromJson(cargosEmpleado, List.class);
            PreparedStatement ver_cargoempleado = c.prepareStatement("SELECT * \n"
                    + "FROM billing_cargosempleado \n"
                    + "WHERE id=?");
            PreparedStatement save_cargoempleado = c.prepareStatement("INSERT INTO billing_cargosempleado(id,nombreCargo,descripcion,numorden,fCreacion,estaActivo) \n"
                    + "VALUES(?,?,?,?,?,?)");
            parsedListcargoEmpl.stream().forEach((Map<String, Object> parsedItem) -> {
                //int var_count = 0;
                try {

                    ver_cargoempleado.setString(1, (String) parsedItem.get("id"));

                    ResultSet rs_cargoempleado = ver_cargoempleado.executeQuery();

                    if (!rs_cargoempleado.last()) {
                        save_cargoempleado.setString(1, (String) parsedItem.get("id"));
                        save_cargoempleado.setString(2, (String) parsedItem.get("nombreCargo"));
                        save_cargoempleado.setString(3, (String) parsedItem.get("descripcion"));
                        save_cargoempleado.setString(4, (String) parsedItem.get("numorden"));
                        save_cargoempleado.setString(5, (String) parsedItem.get("fCreacion"));
                        save_cargoempleado.setString(6, (String) parsedItem.get("estaActivo"));
                        save_cargoempleado.execute();
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(dw_clientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
            /**
             * DEPARTAMENTOS
             */
            List<Map<String, Object>> parsedListDeparta = gson.fromJson(departamentos, List.class);
            PreparedStatement ver_departamento = c.prepareStatement("SELECT * \n"
                    + "FROM billing_departamento \n"
                    + "WHERE idDepartamento=?");
            PreparedStatement save_departamento = c.prepareStatement("INSERT INTO billing_departamento(idDepartamento,nombre,ubicacion,descripcion,numorden,eliminado,fechacreacion) \n"
                    + "VALUES(?,?,?,?,?,?,?)");
            parsedListDeparta.stream().forEach((Map<String, Object> parsedItem) -> {
                try {
                    ver_departamento.setString(1, (String) parsedItem.get("idDepartamento"));
                    ResultSet rs_departamento = ver_departamento.executeQuery();
                    if (!rs_departamento.last()) {
                        save_departamento.setString(1, (String) parsedItem.get("idDepartamento"));
                        save_departamento.setString(2, (String) parsedItem.get("nombre"));
                        save_departamento.setString(3, (String) parsedItem.get("ubicacion"));
                        save_departamento.setString(4, (String) parsedItem.get("descripcion"));
                        save_departamento.setString(5, (String) parsedItem.get("numorden"));
                        save_departamento.setString(6, (String) parsedItem.get("eliminado"));
                        save_departamento.setString(7, (String) parsedItem.get("fechacreacion"));
                        save_departamento.execute();
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(dw_clientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
            /**
             * EMPLEADOS
             */
            List<Map<String, Object>> parsedListempleados = gson.fromJson(empleados, List.class);
            PreparedStatement ver_empleados = c.prepareStatement("SELECT * \n"
                    + "FROM billing_empleado \n"
                    + "WHERE id=?");
            PreparedStatement save_empleado = c.prepareStatement("INSERT INTO billing_empleado(id,id_indice,PersonaComercio_cedulaRuc,username,clave,nombres,apellidos,email,telefonos,celular,cargosempleado_id,Departamento_idPerteneciente,fechaIngreso,fechaSalida,sueldo,observaciones,estaActivo,accesoSistema,esSuperUsuario,soloAdmin,salida_automatica,ccostos_id,profesion_emp) \n"
                    + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            parsedListempleados.stream().forEach((Map<String, Object> parsedItem) -> {
                try {
                    ver_empleados.setString(1, (String) parsedItem.get("id"));
                    ResultSet rs_empleado = ver_empleados.executeQuery();
                    if (!rs_empleado.last()) {
                        save_empleado.setString(1, (String) parsedItem.get("id"));
                        save_empleado.setString(2, (String) parsedItem.get("id_indice"));
                        save_empleado.setString(3, (String) parsedItem.get("PersonaComercio_cedulaRuc"));
                        save_empleado.setString(4, (String) parsedItem.get("username"));
                        save_empleado.setString(5, (String) parsedItem.get("clave"));
                        save_empleado.setString(6, (String) parsedItem.get("nombres"));
                        save_empleado.setString(7, (String) parsedItem.get("apellidos"));
                        save_empleado.setString(8, (String) parsedItem.get("email"));
                        save_empleado.setString(9, (String) parsedItem.get("telefonos"));
                        save_empleado.setString(10, (String) parsedItem.get("celular"));
                        save_empleado.setString(11, (String) parsedItem.get("cargosempleado_id"));
                        save_empleado.setString(12, (String) parsedItem.get("Departamento_idPerteneciente"));
                        save_empleado.setString(13, (String) parsedItem.get("fechaIngreso"));
                        save_empleado.setString(14, (String) parsedItem.get("fechaSalida"));
                        save_empleado.setString(15, (String) parsedItem.get("sueldo"));
                        save_empleado.setString(16, (String) parsedItem.get("observaciones"));
                        save_empleado.setString(17, (String) parsedItem.get("estaActivo"));
                        save_empleado.setString(18, (String) parsedItem.get("accesoSistema"));
                        save_empleado.setString(19, (String) parsedItem.get("esSuperUsuario"));
                        save_empleado.setString(20, (String) parsedItem.get("soloAdmin"));
                        save_empleado.setString(21, (String) parsedItem.get("salida_automatica"));
                        save_empleado.setString(22, (String) parsedItem.get("ccostos_id"));
                        save_empleado.setString(23, (String) parsedItem.get("profesion_emp"));
                        save_empleado.execute();
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(dw_clientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            });

            /*
             * CLIENTES
             */
            List<Map<String, Object>> parsedListCliente = gson.fromJson(cliente, List.class);
            PreparedStatement cliente_ver = c.prepareStatement("SELECT * \n"
                    + "FROM billing_cliente \n"
                    + "WHERE PersonaComercio_cedulaRuc=?");
            PreparedStatement save_cliente = c.prepareStatement("INSERT INTO billing_cliente(billing_cliente_id,es_pasaporte,PersonaComercio_cedulaRuc,nombres,apellidos,razonsocial,nombre_comercial,direccion,diasCredito,pais,ciudad,comentarios,clientetipo_idclientetipo,descuentomaxporcent,cupocredito,email,telefonos,celular,docidentificacion_id,vendedor_id,fecha,usuario,clave,cupo_temporal,tipo_ruc,descuentotemp,clase,provincia,canton,parroquia,sexo,estado_civil,origen_ingresos,tipo_identificacion,cuenta_gasto,credito,id_sector,estaActivo,id_nro_poste,codigo_cliente,descuento_valor,profesion_cli,edad_cli,fecha_nacimiento_cli,es_parking,imagen,fecha_creacion_cli,direccion2,anio_aportacion,fecha_fallecimiento,celular2,categoria_id) \n"
                    + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

            parsedListCliente.stream().forEach((Map<String, Object> parsedItem) -> {

                try {

                    cliente_ver.setString(1, (String) parsedItem.get("PersonaComercio_cedulaRuc"));

                    ResultSet rs_cliente = cliente_ver.executeQuery();

                    if (rs_cliente.last()) {

                        // JOptionPane.showMessageDialog(null, "TIPO CLIENTE EXISTE", "VERIFIQUE POR FAVOR", JOptionPane.ERROR_MESSAGE);
                        txt_area_detalles_cliente.append("Dato Duplicado: -> " + (String) parsedItem.get("PersonaComercio_cedulaRuc") + " " + (String) parsedItem.get("nombres") + " " + (String) parsedItem.get("apellidos") + "\n");

                    } else {
                        var_count++;
                        save_cliente.setString(1, (String) parsedItem.get("billing_cliente_id"));
                        save_cliente.setString(2, (String) parsedItem.get("es_pasaporte"));
                        save_cliente.setString(3, (String) parsedItem.get("PersonaComercio_cedulaRuc"));
                        save_cliente.setString(4, (String) parsedItem.get("nombres"));
                        save_cliente.setString(5, (String) parsedItem.get("apellidos"));
                        save_cliente.setString(6, (String) parsedItem.get("razonsocial"));
                        save_cliente.setString(7, (String) parsedItem.get("nombre_comercial"));
                        save_cliente.setString(8, (String) parsedItem.get("direccion"));
                        save_cliente.setString(9, (String) parsedItem.get("diasCredito"));
                        save_cliente.setString(10, (String) parsedItem.get("pais"));
                        save_cliente.setString(11, (String) parsedItem.get("ciudad"));
                        save_cliente.setString(12, (String) parsedItem.get("comentarios"));
                        save_cliente.setString(13, (String) parsedItem.get("clientetipo_idclientetipo"));
                        save_cliente.setString(14, (String) parsedItem.get("descuentomaxporcent"));
                        save_cliente.setString(15, (String) parsedItem.get("cupocredito"));
                        save_cliente.setString(16, (String) parsedItem.get("email"));
                        save_cliente.setString(17, (String) parsedItem.get("telefonos"));
                        save_cliente.setString(18, (String) parsedItem.get("celular"));
                        save_cliente.setString(19, (String) parsedItem.get("docidentificacion_id"));
                        save_cliente.setString(20, (String) parsedItem.get("vendedor_id"));
                        save_cliente.setString(21, (String) parsedItem.get("fecha"));
                        save_cliente.setString(22, (String) parsedItem.get("usuario"));
                        save_cliente.setString(23, (String) parsedItem.get("clave"));
                        save_cliente.setString(24, (String) parsedItem.get("cupo_temporal"));
                        save_cliente.setString(25, (String) parsedItem.get("tipo_ruc"));
                        save_cliente.setString(26, (String) parsedItem.get("descuentotemp"));
                        save_cliente.setString(27, (String) parsedItem.get("clase"));
                        save_cliente.setString(28, (String) parsedItem.get("provincia"));
                        save_cliente.setString(29, (String) parsedItem.get("canton"));
                        save_cliente.setString(30, (String) parsedItem.get("parroquia"));
                        save_cliente.setString(31, (String) parsedItem.get("sexo"));
                        save_cliente.setString(32, (String) parsedItem.get("estado_civil"));
                        save_cliente.setString(33, (String) parsedItem.get("origen_ingresos"));
                        save_cliente.setString(34, (String) parsedItem.get("tipo_identificacion"));
                        save_cliente.setString(35, (String) parsedItem.get("cuenta_gasto"));
                        save_cliente.setString(36, (String) parsedItem.get("credito"));
                        save_cliente.setString(37, (String) parsedItem.get("id_sector"));
                        save_cliente.setString(38, (String) parsedItem.get("estaActivo"));
                        save_cliente.setString(39, (String) parsedItem.get("id_nro_poste"));
                        save_cliente.setString(40, (String) parsedItem.get("codigo_cliente"));
                        save_cliente.setString(41, (String) parsedItem.get("descuento_valor"));
                        save_cliente.setString(42, (String) parsedItem.get("profesion_cli"));
                        save_cliente.setString(43, (String) parsedItem.get("edad_cli"));
                        save_cliente.setString(44, (String) parsedItem.get("fecha_nacimiento_cli"));
                        save_cliente.setString(45, (String) parsedItem.get("es_parking"));
                        save_cliente.setString(46, (String) parsedItem.get("imagen"));
                        save_cliente.setString(47, (String) parsedItem.get("fecha_creacion_cli"));
                        save_cliente.setString(48, (String) parsedItem.get("direccion2"));
                        save_cliente.setString(49, (String) parsedItem.get("anio_aportacion"));
                        save_cliente.setString(50, (String) parsedItem.get("fecha_fallecimiento"));
                        save_cliente.setString(51, (String) parsedItem.get("celular2"));
                        save_cliente.setString(52, (String) parsedItem.get("categoria_i"));

                        save_cliente.execute();

                        txt_area_detalles_cliente.append("Dato Transmito: -> " + (String) parsedItem.get("PersonaComercio_cedulaRuc") + " " + (String) parsedItem.get("nombres") + " " + (String) parsedItem.get("apellidos") + "\n");

                        String total = String.valueOf(var_count);
                        lb_total_cliente.setText(total);

                    }

                } catch (SQLException ex) {
                    Logger.getLogger(dw_clientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            });

        } catch (SQLException e) {
            System.out.println(e.getMessage());

        } finally {
            con.desconectar();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton descargar_data_cliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_total_cliente;
    private javax.swing.JButton subir_data_cliente;
    private javax.swing.JTextArea txt_area_detalles_cliente;
    // End of variables declaration//GEN-END:variables
}
